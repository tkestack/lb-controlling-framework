/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2019 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
	lbcftkestackiov1 "tkestack.io/lb-controlling-framework/pkg/apis/lbcf.tkestack.io/v1"
)

// FakeBinds implements BindInterface
type FakeBinds struct {
	Fake *FakeLbcfV1
	ns   string
}

var bindsResource = schema.GroupVersionResource{Group: "lbcf.tkestack.io", Version: "v1", Resource: "binds"}

var bindsKind = schema.GroupVersionKind{Group: "lbcf.tkestack.io", Version: "v1", Kind: "Bind"}

// Get takes name of the bind, and returns the corresponding bind object, and an error if there is any.
func (c *FakeBinds) Get(name string, options v1.GetOptions) (result *lbcftkestackiov1.Bind, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(bindsResource, c.ns, name), &lbcftkestackiov1.Bind{})

	if obj == nil {
		return nil, err
	}
	return obj.(*lbcftkestackiov1.Bind), err
}

// List takes label and field selectors, and returns the list of Binds that match those selectors.
func (c *FakeBinds) List(opts v1.ListOptions) (result *lbcftkestackiov1.BindList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(bindsResource, bindsKind, c.ns, opts), &lbcftkestackiov1.BindList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &lbcftkestackiov1.BindList{ListMeta: obj.(*lbcftkestackiov1.BindList).ListMeta}
	for _, item := range obj.(*lbcftkestackiov1.BindList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested binds.
func (c *FakeBinds) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(bindsResource, c.ns, opts))

}

// Create takes the representation of a bind and creates it.  Returns the server's representation of the bind, and an error, if there is any.
func (c *FakeBinds) Create(bind *lbcftkestackiov1.Bind) (result *lbcftkestackiov1.Bind, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(bindsResource, c.ns, bind), &lbcftkestackiov1.Bind{})

	if obj == nil {
		return nil, err
	}
	return obj.(*lbcftkestackiov1.Bind), err
}

// Update takes the representation of a bind and updates it. Returns the server's representation of the bind, and an error, if there is any.
func (c *FakeBinds) Update(bind *lbcftkestackiov1.Bind) (result *lbcftkestackiov1.Bind, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(bindsResource, c.ns, bind), &lbcftkestackiov1.Bind{})

	if obj == nil {
		return nil, err
	}
	return obj.(*lbcftkestackiov1.Bind), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeBinds) UpdateStatus(bind *lbcftkestackiov1.Bind) (*lbcftkestackiov1.Bind, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(bindsResource, "status", c.ns, bind), &lbcftkestackiov1.Bind{})

	if obj == nil {
		return nil, err
	}
	return obj.(*lbcftkestackiov1.Bind), err
}

// Delete takes name of the bind and deletes it. Returns an error if one occurs.
func (c *FakeBinds) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(bindsResource, c.ns, name), &lbcftkestackiov1.Bind{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeBinds) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(bindsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &lbcftkestackiov1.BindList{})
	return err
}

// Patch applies the patch and returns the patched bind.
func (c *FakeBinds) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *lbcftkestackiov1.Bind, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(bindsResource, c.ns, name, pt, data, subresources...), &lbcftkestackiov1.Bind{})

	if obj == nil {
		return nil, err
	}
	return obj.(*lbcftkestackiov1.Bind), err
}
